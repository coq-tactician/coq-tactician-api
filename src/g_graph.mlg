DECLARE PLUGIN "graph_plugin"

{

open Stdarg
open Graph_visualizer

}

VERNAC COMMAND EXTEND LGraph CLASSIFIED AS QUERY
| [ "Graph" "Ident" global(x) ] -> { SimpleViz.make_global_graph x }
| [ "Shared" "Graph" "Ident" global(x) ] -> { SimpleHashedViz.make_global_graph x }
| [ "Graph" "Depth" int(d) "Ident" global(x) ] -> { SimpleViz.make_global_graph ~def_depth:d x }
| [ "Shared" "Graph" "Depth" int(d) "Ident" global(x) ] -> { SimpleHashedViz.make_global_graph ~def_depth:d x }
| [ "Graph" "Term" constr(x) ] -> { SimpleViz.make_constr_graph x }
| [ "Shared" "Graph" "Term" constr(x) ] -> { SimpleHashedViz.make_constr_graph x }
| [ "Graph" "Depth" int(d) "Term" constr(x) ] -> { SimpleViz.make_constr_graph ~def_depth:d x }
| [ "Shared" "Graph" "Depth" int(d) "Term" constr(x) ] -> { SimpleHashedViz.make_constr_graph ~def_depth:d x }
END

VERNAC COMMAND EXTEND LGraphProof CLASSIFIED AS QUERY STATE proof_query
| [ "Graph" "Proof" ] -> { fun ~pstate -> SimpleViz.make_proof_graph pstate }
| [ "Shared" "Graph" "Proof" ] -> { fun ~pstate -> SimpleHashedViz.make_proof_graph pstate }
| [ "Graph" "Depth" int(d) "Proof" ] -> { fun ~pstate -> SimpleViz.make_proof_graph ~def_depth:d pstate }
| [ "Shared" "Graph" "Depth" int(d) "Proof" ] -> { fun ~pstate -> SimpleHashedViz.make_proof_graph ~def_depth:d pstate }
END

VERNAC COMMAND EXTEND Reinforce CLASSIFIED AS QUERY
| [ "Reinforce" ] -> { Reinforce.reinforce_stdin () }
| [ "Reinforce" string(ip_addr) int(port) ] -> { Reinforce.reinforce_tcp ip_addr port }
END

VERNAC COMMAND EXTEND CheckNeuralAlignment CLASSIFIED AS QUERY
| [ "Check" "Neural" "Alignment" ] -> { Neural_learner.check_neural_alignment () }
END
