DECLARE PLUGIN "graph_plugin"

{

open Stdarg

}

VERNAC COMMAND EXTEND Graph CLASSIFIED AS QUERY
| [ "Graph" "Ident" global(x) ] -> { Visualizer.make_global_graph x false }
| [ "Full" "Graph" "Ident" global(x) ] -> { Visualizer.make_global_graph x true }
| [ "Graph" "Term" constr(x) ] -> { Visualizer.make_constr_graph x false }
| [ "Full" "Graph" "Term" constr(x) ] -> { Visualizer.make_constr_graph x true }
END

VERNAC COMMAND EXTEND GraphProof CLASSIFIED AS QUERY STATE proof_query
| [ "Graph" "Proof" ] -> { fun ~pstate -> Visualizer.make_proof_graph pstate false }
| [ "Full" "Graph" "Proof" ] -> { fun ~pstate -> Visualizer.make_proof_graph pstate true }
END

VERNAC COMMAND EXTEND DAG CLASSIFIED AS QUERY
| [ "DAG" "Ident" global(x) ] -> { Dag_visualizer.make_global_graph x false }
| [ "Full" "DAG" "Ident" global(x) ] -> { Dag_visualizer.make_global_graph x true }
| [ "DAG" "Term" constr(x) ] -> { Dag_visualizer.make_constr_graph x false }
| [ "Full" "DAG" "Term" constr(x) ] -> { Dag_visualizer.make_constr_graph x true }
END

VERNAC COMMAND EXTEND DAGProof CLASSIFIED AS QUERY STATE proof_query
| [ "DAG" "Proof" ] -> { fun ~pstate -> Dag_visualizer.make_proof_graph pstate false }
| [ "Full" "DAG" "Proof" ] -> { fun ~pstate -> Dag_visualizer.make_proof_graph pstate true }
END

VERNAC COMMAND EXTEND Reinforce CLASSIFIED AS QUERY
| [ "Reinforce" ] -> { Reinforce.reinforce () }
END
